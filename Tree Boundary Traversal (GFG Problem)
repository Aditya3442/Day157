class Solution {
    public boolean isLeaf(Node root){
        if(root.left == null && root.right == null)
           return true;
        return false;
    }
    
    public void left(Node root , ArrayList<Integer> res){
        Node curr = root.left;
        while(curr != null){
            if(isLeaf(curr) == false)
               res.add(curr.data);
            if(curr.left != null)
               curr = curr.left;
            else
               curr = curr.right;
        }
    }
    
    public void leaf(Node root , ArrayList<Integer> res){
        if(isLeaf(root) == true)
           res.add(root.data);
           
        if(root.left != null)
           leaf(root.left , res);
        if(root.right != null)
           leaf(root.right , res);
    }
    
    public void right(Node root , ArrayList<Integer> res){
        List<Integer> l = new ArrayList<>();
        Node curr = root.right;
        while(curr != null){
            if(isLeaf(curr) == false)
               l.add(curr.data);
            if(curr.right != null)
                curr = curr.right;
            else
                curr = curr.left;
        }
        for(int i = l.size() - 1 ; i >= 0 ; i--){
            res.add(l.get(i));
        }
    }
    
    ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
        
        ArrayList<Integer> res = new ArrayList<>();
        if(isLeaf(node) == false)
            res.add(node.data);
        
        left(node , res);
        leaf(node , res);
        right(node , res);
        
        return res;
    }
}
